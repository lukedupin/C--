from folder.folder.file import dockBob

let _global = 32.2 :f32;

signal bobAdam( x: i32 );

enum Ez
{
    ONE,
    TWO,
    THREE,
}

fn test( y: Ez )
{
    let x = match ( y )
    {
        Ez.ONE => 4,
        Ez.TWO => 8,
        Ez.THREE => { println("First message"); 12 },
        default => 5,
    }

    switch ( y )
    {
        Ez.ONE =>
            println("One"),

        Ez.TWO => {
            println("Two")

            //Run the next statement
            continue
        },

        default =>
            println("Default value"),
    }
}

fn nuts()
{
    let net  = Poop {
        PubVar = 12,
    };

    net.methods[2]
    net.members[0]

    dogFunction( b=31, a=42 )

    for i in 10..5 `top
    {
        for mut r in 0..20 `middle
        {
            if r == 10 && i == 12 {
                break top
            }

            if r == 15 {
                break
            }
        }
    }

    for x in 0..12 `name
    {
        if ( name.first )
            println("First entry")
        if ( name.last )
            println("Last entry")
        if ( name.index == 4 )
            continue
        if ( name.index == 14 )
            break
    }

    final {

    }

    return 0
}

fn dogFunction( a: i32, b: f32 ) {
  let ned = 79;

  if true {
    a = 32;
  }
  elif ( ned >= 32 ) {
    b = (ned + 1) * 2;
  }
  else {
    ned -= 10;
    return;
  }

  let string = "Something bitchin";
  let aba = "Something bitchin %f32 -> %d %s" % (0.4, ned * 3, "Funny");
  string = "Something bitchin #{ned} %f32" % (44.3);

  let poo = Poop;
  poo.bob( 39483:i64 );

  //Power operator
  let nut = 3232 ** 4

  let handle = async { bob(ned) };
  let nut = timer(100,500) { bob(ned) };

  //Lambda
  (x: i32) => i64 {
        return i64(x);
  }

  let reg = /afdsfasdfefefe/ =~ "adfsfad"

  dockBob(reg, nut)


  final:
  let x = 2;
}

//Signal
@signal(dockBob)
fn onDockBob( x: i32, y:i32 )
{
}

fn wrapIt( func: fn, *args: [], *kwargs: {} )
{
    //Do stuff
    func( args )
    //Do stuff
}

class Poop
{
    //Member variables without getter/setter
    mut _item = 13:i32;

    //Member variable, that implements getter and setter
    mut PubVar = 0:i64 {
        get { return PubVar }
        set( x:i64 ) { PubVar = x }
    };

    //Assing op
    fn op=( mut self, y:i64 ) => i64
    {
        return self.PubVar = y
    }

    // implement a == operator
    fn op==( self, x:i64 ) => bool
    {
        return self.PubVar == x
    }

    @signal(dockBob)
    fn onDockBob( mut self, x:i32, y:i32)
    {
        println("Got a {0} {1}" % (x, y));
        dirty { self.stateful( 12 ) }
    }

    fn bob( self, mult: i64 ) => i64
    {
        return self.PubVar * mult;
    }

    fn stateful( mut self, mult: mut i64 )
    {
        self.PubVar++
    }

}
